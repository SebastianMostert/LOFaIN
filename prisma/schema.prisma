// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  discord       Json

  // Current assigned country
  countryId String?  @db.ObjectId
  country   Country? @relation(fields: [countryId], references: [id])

  // Notification preferences
  notificationSetting NotificationSetting?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Vote          Vote[]
  Amendment     Amendment[]
  threads       DiscussionThread[]       @relation("ThreadCreatorUser")
  posts         DiscussionPost[]         @relation("PostAuthorUser")
  motions       ModMotion[]              @relation("MotionCreatedByUser")
  modVotes      ModVote[]                @relation("ModVoteUser")
  reactions     PostReaction[]           @relation("PostReactionUser")
  sanctions     Sanction[]               @relation("SanctionIssuedByUser")
  chairLogs     ChairActionLog[]         @relation("ChairActionActorUser")
  subscriptions DiscussionSubscription[] @relation("ThreadSubscriptionUser")
}

model Country {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  slug     String  @unique
  code     String? // e.g., "FRA", "USSR", "ITA"
  colorHex String? // muted accent for UI
  isActive Boolean @default(true)

  // Can they veto
  hasVeto Boolean @default(false)

  users    User[]
  mappings CountryMapping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Vote              Vote[]
  Amendment         Amendment[]
  threads           DiscussionThread[]       @relation("ThreadCreatorCountry")
  posts             DiscussionPost[]         @relation("PostAuthorCountry")
  motionsCreated    ModMotion[]              @relation("MotionCreatedByCountry")
  motionsTargeted   ModMotion[]              @relation("MotionTargetCountry")
  modVotes          ModVote[]                @relation("ModVoteCountry")
  reactions         PostReaction[]           @relation("PostReactionCountry")
  sanctionsIssued   Sanction[]               @relation("SanctionIssuedByCountry")
  sanctionsReceived Sanction[]               @relation("SanctionTargetCountry")
  chairLogs         ChairActionLog[]         @relation("ChairActionActorCountry")
  subscriptions     DiscussionSubscription[] @relation("SubscriptionCountry")
}

model CountryMapping {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  discordId String  @unique
  countryId String  @db.ObjectId
  country   Country @relation(fields: [countryId], references: [id])
}

model NotificationSetting {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  inAppOnClose Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// Core treaty
model Treaty {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String    @unique
  adopted   Boolean   @default(true)
  adoptedAt DateTime?
  preamble  String?
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Amendment Amendment[]
}

model Article {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  treatyId String @db.ObjectId
  order    Int
  heading  String
  body     String
  treaty   Treaty @relation(fields: [treatyId], references: [id], onDelete: Cascade)

  @@unique([treatyId, order])
}

// Amendments-only
enum AmendmentOp {
  ADD // add a new article (or new clause)
  EDIT // replace body/heading of an existing article
  REMOVE // remove an article
}

enum AmendmentStatus {
  DRAFT
  OPEN
  CLOSED
}

enum AmendmentResult {
  PASSED
  FAILED
}

model Amendment {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  treatyId        String           @db.ObjectId
  // Target: if EDIT/REMOVE → target existing article; if ADD → can be null + newOrder provided
  targetArticleId String?          @db.ObjectId
  op              AmendmentOp
  slug            String           @unique // e.g., "amendment-1"
  title           String
  rationale       String? // explain why
  // Proposed content
  newHeading      String? // for ADD/EDIT
  newBody         String? // for ADD/EDIT
  newOrder        Int? // for ADD (where to insert)
  // Voting
  status          AmendmentStatus  @default(DRAFT)
  result          AmendmentResult?
  opensAt         DateTime?
  closesAt        DateTime?
  threshold       Float? // default 2/3 if null
  eligibleCount   Int? // frozen at OPEN time
  quorum          Int?             @default(0) // minimum votes required
  votes           Vote[]

  treaty Treaty @relation(fields: [treatyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proposerCountryId String? @db.ObjectId
  proposerUserId    String? @db.ObjectId

  proposerCountry Country? @relation(fields: [proposerCountryId], references: [id], onDelete: SetNull)
  proposerUser    User?    @relation(fields: [proposerUserId], references: [id], onDelete: SetNull)

  // Reason for failure, if any
  failureReason String?
}

enum VoteChoice {
  AYE
  NAY
  ABSTAIN
  ABSENT
}

model Vote {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  amendmentId String     @db.ObjectId
  countryId   String     @db.ObjectId
  userId      String?    @db.ObjectId
  choice      VoteChoice
  comment     String?
  createdAt   DateTime   @default(now())

  amendment Amendment @relation(fields: [amendmentId], references: [id], onDelete: Cascade)
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([amendmentId, countryId]) // one vote per country per amendment
}

enum ModMotionType {
  LOCK_THREAD
  UNLOCK_THREAD
  PIN_THREAD
  UNPIN_THREAD
  ARCHIVE_THREAD
  REMOVE_POST
  RESTORE_POST
  ISSUE_SANCTION
  LIFT_SANCTION
}

enum ModMotionStatus {
  DRAFT
  PROPOSED
  VOTING
  PASSED
  FAILED
  WITHDRAWN
  EXECUTED
}

enum ModVoteChoice {
  APPROVE
  REJECT
  ABSTAIN
}

enum ReactionType {
  ENDORSE
  OPPOSE
  QUESTION
  FLAG
  INFORMATIVE
}

enum SanctionType {
  WARNING
  REPRIMAND
  SUSPENSION
  EXPULSION
  FINANCIAL_PENALTY
  RIGHTS_RESTRICTION
}

enum ChairActionType {
  LOG_NOTE
  LOCK_THREAD
  UNLOCK_THREAD
  PIN_THREAD
  UNPIN_THREAD
  ARCHIVE_THREAD
  RESTORE_POST
  ISSUE_SANCTION
  LIFT_SANCTION
}

model DiscussionThread {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  slug               String    @unique
  title              String
  summary            String?
  isLocked           Boolean   @default(false)
  isPinned           Boolean   @default(false)
  isArchived         Boolean   @default(false)
  lastPostAt         DateTime?
  createdByUserId    String?   @db.ObjectId
  createdByCountryId String?   @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  createdByUser    User?                    @relation("ThreadCreatorUser", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByCountry Country?                 @relation("ThreadCreatorCountry", fields: [createdByCountryId], references: [id], onDelete: SetNull)
  posts            DiscussionPost[]
  motions          ModMotion[]
  subscriptions    DiscussionSubscription[]
  chairActions     ChairActionLog[]

  @@index([createdByCountryId])
  @@index([createdByUserId])
  @@index([isPinned, createdAt])
  @@index([isArchived, createdAt])
}

model DiscussionPost {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  threadId        String    @db.ObjectId
  parentPostId    String?   @db.ObjectId
  authorUserId    String?   @db.ObjectId
  authorCountryId String?   @db.ObjectId
  body            String
  isEdited        Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  editedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  thread        DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent        DiscussionPost?  @relation("PostReplies", fields: [parentPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       DiscussionPost[] @relation("PostReplies")
  authorUser    User?            @relation("PostAuthorUser", fields: [authorUserId], references: [id], onDelete: SetNull)
  authorCountry Country?         @relation("PostAuthorCountry", fields: [authorCountryId], references: [id], onDelete: SetNull)
  reactions     PostReaction[]
  motions       ModMotion[]      @relation("MotionPostTargets")
  chairActions  ChairActionLog[] @relation("ChairActionPost")

  @@index([threadId])
  @@index([threadId, createdAt])
  @@index([parentPostId])
  @@index([authorCountryId])
  @@index([authorUserId])
}

model ModMotion {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  type               ModMotionType
  status             ModMotionStatus @default(DRAFT)
  title              String
  description        String?
  rationale          String?
  context            Json?
  targetThreadId     String?         @db.ObjectId
  targetPostId       String?         @db.ObjectId
  targetCountryId    String?         @db.ObjectId
  createdByUserId    String?         @db.ObjectId
  createdByCountryId String?         @db.ObjectId
  submittedAt        DateTime?
  openedAt           DateTime?
  closedAt           DateTime?
  resolvedAt         DateTime?
  resolutionNote     String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  targetThread     DiscussionThread? @relation(fields: [targetThreadId], references: [id], onDelete: SetNull)
  targetPost       DiscussionPost?   @relation("MotionPostTargets", fields: [targetPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  targetCountry    Country?          @relation("MotionTargetCountry", fields: [targetCountryId], references: [id], onDelete: SetNull)
  createdByUser    User?             @relation("MotionCreatedByUser", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByCountry Country?          @relation("MotionCreatedByCountry", fields: [createdByCountryId], references: [id], onDelete: SetNull)
  votes            ModVote[]
  sanctions        Sanction[]
  chairActions     ChairActionLog[]

  @@index([status])
  @@index([type])
  @@index([targetThreadId])
  @@index([targetPostId])
  @@index([targetCountryId])
  @@index([createdByCountryId])
  @@index([createdByUserId])
}

model ModVote {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  motionId  String        @db.ObjectId
  countryId String        @db.ObjectId
  userId    String?       @db.ObjectId
  choice    ModVoteChoice
  comment   String?
  createdAt DateTime      @default(now())

  motion  ModMotion @relation(fields: [motionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country Country   @relation("ModVoteCountry", fields: [countryId], references: [id], onDelete: Cascade)
  user    User?     @relation("ModVoteUser", fields: [userId], references: [id], onDelete: SetNull)

  @@unique([motionId, countryId])
  @@index([motionId])
  @@index([countryId])
  @@index([userId])
}

model PostReaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  postId    String       @db.ObjectId
  countryId String       @db.ObjectId
  userId    String?      @db.ObjectId
  type      ReactionType
  note      String?
  createdAt DateTime     @default(now())

  post    DiscussionPost @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country Country        @relation("PostReactionCountry", fields: [countryId], references: [id], onDelete: Cascade)
  user    User?          @relation("PostReactionUser", fields: [userId], references: [id], onDelete: SetNull)

  @@unique([postId, countryId, type])
  @@index([postId])
  @@index([countryId])
  @@index([userId])
}

model Sanction {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  motionId          String?      @db.ObjectId
  targetCountryId   String       @db.ObjectId
  issuedByCountryId String?      @db.ObjectId
  issuedByUserId    String?      @db.ObjectId
  type              SanctionType
  title             String
  summary           String?
  details           String?
  isActive          Boolean      @default(true)
  issuedAt          DateTime     @default(now())
  effectiveAt       DateTime?
  expiresAt         DateTime?
  rescindedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  motion          ModMotion?       @relation(fields: [motionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  targetCountry   Country          @relation("SanctionTargetCountry", fields: [targetCountryId], references: [id], onDelete: Cascade)
  issuedByCountry Country?         @relation("SanctionIssuedByCountry", fields: [issuedByCountryId], references: [id], onDelete: SetNull)
  issuedByUser    User?            @relation("SanctionIssuedByUser", fields: [issuedByUserId], references: [id], onDelete: SetNull)
  chairActions    ChairActionLog[]

  @@index([motionId])
  @@index([targetCountryId])
  @@index([type])
  @@index([isActive, targetCountryId])
}

model ChairActionLog {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  type           ChairActionType
  actorUserId    String?         @db.ObjectId
  actorCountryId String?         @db.ObjectId
  motionId       String?         @db.ObjectId
  threadId       String?         @db.ObjectId
  postId         String?         @db.ObjectId
  sanctionId     String?         @db.ObjectId
  note           String?
  metadata       Json?
  createdAt      DateTime        @default(now())

  actorUser    User?             @relation("ChairActionActorUser", fields: [actorUserId], references: [id], onDelete: SetNull)
  actorCountry Country?          @relation("ChairActionActorCountry", fields: [actorCountryId], references: [id], onDelete: SetNull)
  motion       ModMotion?        @relation(fields: [motionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  thread       DiscussionThread? @relation(fields: [threadId], references: [id], onDelete: SetNull)
  post         DiscussionPost?   @relation("ChairActionPost", fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sanction     Sanction?         @relation(fields: [sanctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([type])
  @@index([motionId])
  @@index([threadId])
  @@index([postId])
  @@index([sanctionId])
  @@index([actorCountryId])
  @@index([actorUserId])
}

model DiscussionSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  threadId  String   @db.ObjectId
  countryId String   @db.ObjectId
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  thread  DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  country Country          @relation("SubscriptionCountry", fields: [countryId], references: [id], onDelete: Cascade)
  user    User?            @relation("ThreadSubscriptionUser", fields: [userId], references: [id], onDelete: SetNull)

  @@unique([threadId, countryId])
  @@index([threadId])
  @@index([userId])
}
